>>> # example of making a single class prediction
... from sklearn.linear_model import LogisticRegression
>>> from sklearn.datasets.samples_generator import make_blobs
>>> # generate 2d classification dataset
... X, y = make_blobs(n_samples=100, centers=2, n_features=2, random_state=1)
>>> # fit final model
... model = LogisticRegression()
>>> model.fit(X, y)
C:\A\lib\site-packages\sklearn\linear_model\logistic.py:433: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.
  FutureWarning)
LogisticRegression(C=1.0, class_weight=None, dual=False, fit_intercept=True,
          intercept_scaling=1, max_iter=100, multi_class='warn',
          n_jobs=None, penalty='l2', random_state=None, solver='warn',
          tol=0.0001, verbose=0, warm_start=False)
>>> # define one new instance
... Xnew = [[-0.79415228, 2.10495117]]
>>> # make a prediction
... ynew = model.predict(Xnew)
>>> print("X=%s, Predicted=%s" % (Xnew[0], ynew[0]))
X=[-0.79415228, 2.10495117], Predicted=0
>>>





>>> from sklearn.linear_model import LinearRegression
>>> from sklearn.datasets import make_regression
>>> # generate regression dataset
... X, y = make_regression(n_samples=100, n_features=2, noise=0.1, random_state=1)
>>> # fit final model
... model = LinearRegression()
>>> model.fit(X, y)
LinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,
         normalize=False)